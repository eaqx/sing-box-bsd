name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "version"
        required: true
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { os: freebsd, arch: amd64 }
          - { os: freebsd, arch: "386" }
          - { os: freebsd, arch: arm, goarm: "6" }
          - { os: freebsd, arch: arm, goarm: "7" }
          - { os: freebsd, arch: arm64 }
          - { os: openbsd, arch: amd64 }
          - { os: openbsd, arch: "386" }
          - { os: openbsd, arch: arm, goarm: "6" }
          - { os: openbsd, arch: arm, goarm: "7" }
          - { os: openbsd, arch: arm64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          repository: SagerNet/sing-box
          ref: v${{ github.event.inputs.version }}
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ^1.25.3
      - name: Set build tags
        run: |
          set -xeuo pipefail
          TAGS='with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale'
          echo "BUILD_TAGS=${TAGS}" >> "${GITHUB_ENV}"
      - name: Build
        run: |
          set -xeuo pipefail
          mkdir -p dist
          go build -v -trimpath -o dist/sing-box -tags "${BUILD_TAGS}" \
          -ldflags '-s -buildid= -X github.com/sagernet/sing-box/constant.Version=${{ github.event.inputs.version }}' \
          ./cmd/sing-box
        env:
          CGO_ENABLED: "0"
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GOARM: ${{ matrix.goarm }}
      - name: Prepare
        run: |
          set -xeuo pipefail
          mkdir -p output/sing-box
          mv dist/sing-box output/sing-box
          cp LICENSE output/sing-box
          cd output
          mv sing-box sing-box-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.goarm && format('v{0}', matrix.goarm) }}
          tar -czf sing-box-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.goarm && format('v{0}', matrix.goarm) }}.tar.gz \
          sing-box-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.goarm && format('v{0}', matrix.goarm) }}
          rm -rf sing-box-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.goarm && format('v{0}', matrix.goarm) }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}_${{ matrix.arch }}${{ matrix.goarm && format('v{0}', matrix.goarm) }}
          path: output/*
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: 
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
          merge-multiple: true
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*.tar.gz"
          name: ${{ github.event.inputs.version }}
          tag: v${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
